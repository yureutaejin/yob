name: "Build OCI container"
run-name: "Build OCI container - ${{ github.actor }}"

on:
  workflow_call:
    inputs:
      runner-group:
        description: 'Type the runner group'
        required: true
        default: 'private-runners-yuntae'
        type: string
      runner-label:
        description: 'Type label of runner'
        required: true
        default: 'ytminipc001'
        type: string
      oci_registry:
        description: 'Type the OCI registry you want to use. e.g. `ghcr.io`, `quay.io`,`docker.io`'
        required: true
        default: 'quay.io'
        type: string
      oci_image_repo:
        description: 'Type the image repository path in OCI registry you want to push (`{tenancy-namespace}/{repo-name}`)'
        required: true
        default: 'teamthepioneers/immutable-os-bootc'
        type: string
      oci_image_tag:
        description: 'Type the image tag you want to use'
        required: true
        default: 'latest'
        type: string
  
  workflow_dispatch:
    inputs:
      runner-group:
        description: 'Type the runner group'
        required: true
        default: 'private-runners-yuntae'
        type: string
      runner-label:
        description: 'Type label of runner'
        required: true
        default: 'ytminipc001'
        type: string
      oci_registry:
        description: 'Type the OCI registry you want to use. e.g. `ghcr.io`, `quay.io`,`docker.io`'
        required: true
        default: 'quay.io'
        type: string
      oci_image_repo:
        description: 'Type the image repository path in OCI registry you want to push (`{tenancy-namespace}/{repo-name}`)'
        required: true
        default: 'teamthepioneers/immutable-os-bootc'
        type: string
      oci_image_tag:
        description: 'Type the image tag you want to use'
        required: true
        default: 'latest'
        type: string

jobs:
  build-oci-bootc-image:
    runs-on:
      group: ${{ inputs.runner-group }}
      labels:
        - ${{ inputs.runner-label }}

    steps:
      - name: Verify prerequisites
        run: |
          make --version &> /dev/null || { echo "Make is not installed"; exit 1; }
          docker --version &> /dev/null || { echo "Docker is not installed"; exit 1; }
          hadolint --version &> /dev/null || { echo "Hadolint is not installed"; exit 1; }

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Login to OCI Registry
        run: |
          make login-public-oci-registry
        env:
          OCI_REGISTRY: ${{ inputs.oci_registry }}
          OCI_REGISTRY_USERNAME: ${{ secrets.OCI_REGISTRY_BOT_USERNAME }}
          OCI_REGISTRY_PASSWORD: ${{ secrets.OCI_REGISTRY_BOT_PASSWORD }}

      - name: Check Dockerfile with Hadolint
        run: |
          set -Eeuo pipefail
          make dockerfile-lint
          
          echo '### Dockerfile Linter Result' | tee -a $GITHUB_STEP_SUMMARY
          echo '\n' | tee -a $GITHUB_STEP_SUMMARY
          echo '```json' | tee -a $GITHUB_STEP_SUMMARY
          cat dockerfile-lint.json | tee -a $GITHUB_STEP_SUMMARY
          echo '```' | tee -a $GITHUB_STEP_SUMMARY

          cp -rf dockerfile-lint.json ${{ runner.temp }}/dockerfile-lint.json

      - name: Add Hadolint result to PR comment
        if: ${{ github.event_name == 'pull_request' && !startsWith(github.event.pull_request.head.ref, 'merge-queue/') }}
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const title = "### Dockerfile Linter Result";
            const HadolintResults = fs.readFileSync('dockerfile-lint.json', 'utf8');
            const commentBody = `${title}\n\`\`\`json\n${HadolintResults}\n\`\`\``;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Build OCI image
        run: |
          echo "::group::Build OCI image:"
          make build-oci-bootc-image
          echo "::endgroup::"
        env:
          OCI_REGISTRY: ${{ inputs.oci_registry }}
          OCI_IMAGE_REPO: ${{ inputs.oci_image_repo }}
          OCI_IMAGE_TAG: ${{ inputs.oci_image_tag }}
          GIT_COMMIT_HASH: ${{ github.sha }}

      - name: Push OCI image to registry
        run: |
          echo "::group::Push OCI image to registry:"
          make push-oci-image 
          echo "::endgroup::"
        env:
          OCI_REGISTRY: ${{ inputs.oci_registry }}
          OCI_IMAGE_REPO: ${{ inputs.oci_image_repo }}
          OCI_IMAGE_TAG: ${{ inputs.oci_image_tag }}
